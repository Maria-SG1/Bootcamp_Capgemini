package com.example.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class CalculadoraTest {

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	@DisplayName("Suma 2 enteros")
	void testSuma() {
		var calc = new Calculadora();
		var actual = calc.suma(2, 3);
		assertEquals(5, actual);		
	}
	@Test
	@DisplayName("Suma 2 enteros grandes")
	void testSumaInt() {
		var calc = new Calculadora();
		var actual = calc.suma(Integer.MAX_VALUE, 1);
		assertEquals(5, actual);
//		assertTrue(1 / 0 > 0);  // error no controlado
		assertTrue(1.0 / 0 > 0); // failure
		assertEquals(5, 1.0 / 0);
		assertTrue(actual>0);		
	}
	@Test
	@DisplayName("Suma 2 reales")
	void testSuma2() {
		var calc = new Calculadora();
		var actual = calc.suma(0.1, 0.2);
		assertEquals(0.1, calc.suma(1, -0.9));
		assertEquals(0.3, actual);		
	}
	
	@Test
	@DisplayName("Suma 2 reales: resta")
	void testSuma3() {
		var calc = new Calculadora();	
		assertEquals(0.1, calc.suma(1, -0.9));
	}
	
	@Test
	@DisplayName("División 2 enteros")
	void testDivide() {
		var calc = new Calculadora();
		//var actual = calc.divide(1, 2);  // division entera
		var actual = calc.divide(1.0, 2);
//		var actual = calc.divide(1, 0);
		assertEquals(0.5, actual);		
	}
	
	@Test
	@DisplayName("División por 0")
	void testDivide1() {
		var calc = new Calculadora();	
		
		//ArithmeticException: / by zero
//		double actual = calc.divide(1.0, 0);
//		assertEquals(0.0, actual);
	
//		assertThrows(ArithmeticException.class, ()->calc.divide(1, 0));
		var ex = assertThrows(ArithmeticException.class, ()->calc.divide(1.0, 0));
		assertEquals("/ by zero", ex.getMessage());
				
	}
	
	@Test
	@DisplayName("División por 0: try")
	void testDivide3() {
		var calc = new Calculadora();		
		try {
			calc.divide(1, 0);
			fail("No se ha lanzado excepcion");
		} catch (ArithmeticException e) {
			assertEquals("/ by zero", e.getMessage());
		}		
				
	}

}
