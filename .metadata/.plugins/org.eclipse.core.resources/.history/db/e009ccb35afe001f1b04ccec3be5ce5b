package com.example.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;


class CalculadoraTest {

	Calculadora calc;
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
		calc = new Calculadora();
	}

	@AfterEach
	void tearDown() throws Exception {
	}
	
	@Nested
	@DisplayName("Suma")
	class Suma {
		@Nested
		@DisplayName("Casos validos")
		class OK {
			@Test
			@DisplayName("Suma 2 enteros")
			void testSuma() {
//				var calc = new Calculadora();
				var actual = calc.suma(2, 3);
				assertEquals(5, actual);		
			}
			
			@ParameterizedTest(name= "{0}+{1}={2}")
			@CsvSource({"1,2,3","2,-1,1", "-1,2,1", "-2,-1,-3", "0,0,0", "0.1,0.2,0.3"})
			void testParametrizado(double operando1, double operando2, double expected) {
//				var calc = new Calculadora();
				var actual = calc.suma(operando1, operando2);				
				assertEquals(expected, actual);		
			}
		}
		@Nested
		@DisplayName("Casos invalidos")
		class NOK {
			@Test
			@DisplayName("Suma 2 enteros grandes")
			void testSumaInt() {
				var calc = new Calculadora();
				var actual = calc.suma(Integer.MAX_VALUE, 1);
				assertEquals(5, actual);
//				assertTrue(1 / 0 > 0);  // error no controlado
				assertTrue(1.0 / 0 > 0); // failure
				assertEquals(5, 1.0 / 0);
				assertTrue(actual>0);		
			}
			@Test
			@DisplayName("Suma 2 reales")
			void testSuma2() {
				var calc = new Calculadora();
				var actual = calc.suma(0.1, 0.2);
				assertEquals(0.1, calc.suma(1, -0.9));
				assertEquals(0.3, actual);		
			}
			
			@Test
			@DisplayName("Suma 2 reales: resta")
			void testSuma3() {
				var calc = new Calculadora();	
				assertEquals(0.1, calc.suma(1, -0.9));
			}
			
			
		}
	}
	
//	@Test
//	@DisplayName("Suma 2 enteros")
//	void testSuma() {
////		var calc = new Calculadora();
//		var actual = calc.suma(2, 3);
//		assertEquals(5, actual);		
//	}
	
//	@Test
//	@DisplayName("Suma 2 enteros grandes")
//	void testSumaInt() {
//		var calc = new Calculadora();
//		var actual = calc.suma(Integer.MAX_VALUE, 1);
//		assertEquals(5, actual);
////		assertTrue(1 / 0 > 0);  // error no controlado
//		assertTrue(1.0 / 0 > 0); // failure
//		assertEquals(5, 1.0 / 0);
//		assertTrue(actual>0);		
//	}
//	@Test
//	@DisplayName("Suma 2 reales")
//	void testSuma2() {
//		var calc = new Calculadora();
//		var actual = calc.suma(0.1, 0.2);
//		assertEquals(0.1, calc.suma(1, -0.9));
//		assertEquals(0.3, actual);		
//	}
//	
//	@Test
//	@DisplayName("Suma 2 reales: resta")
//	void testSuma3() {
//		var calc = new Calculadora();	
//		assertEquals(0.1, calc.suma(1, -0.9));
//	}
	
	@Test
	@DisplayName("División 2 enteros")
	void testDivide() {
		var calc = new Calculadora();
		//var actual = calc.divide(1, 2);  // division entera
		var actual = calc.divide(1.0, 2);
//		var actual = calc.divide(1, 0);
		assertEquals(0.5, actual);		
	}
	
	@Test
	@DisplayName("División por 0")
	void testDivide1() {
		var calc = new Calculadora();	
		
		//ArithmeticException: / by zero
//		double actual = calc.divide(1.0, 0);
//		assertEquals(0.0, actual);
	
//		assertThrows(ArithmeticException.class, ()->calc.divide(1, 0));
		var ex = assertThrows(ArithmeticException.class, ()->calc.divide(1.0, 0));
		assertEquals("/ by zero", ex.getMessage());
				
	}
	
	@Test
	@DisplayName("División por 0: try")
	void testDivide3() {
		var calc = new Calculadora();		
		try {
			calc.divide(1.0, 0);
			fail("No se ha lanzado excepcion");
		} catch (ArithmeticException e) {
			assertEquals("/ by zero", e.getMessage());
		}		
				
	}

}
